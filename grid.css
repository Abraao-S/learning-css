/* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout */

/* grid-column-start: https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start */

/* grid-column-end: https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end */

/* grid-column: https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column */

html {
    display: grid;
    grid-template-columns: 20% 20% 20% 20% 20% ;    /* defines 5 columns with equal widths */
}

/* definind manually */
* {
    grid-column-start: 1;
    grid-column-end: 6; /* Here should be 6 because its defining the limit where it ends, so in a grid with 5 columns, the LINE in which the fifth columns end is the 6th line! */
}

/* shorthand property for start and end: */
* {
    grid-column: 1/6;   /* same thing */
}

/* using span (note: span only accepts positive values) */
* {
    grid-column-start: 1;
    grid-column-end: span 5;    /* this will take 5 columns starting from the defined in grid-column-start */
}

/* using negative values: */
* {
    grid-column-start: -3;  /* this will start counting from the right instead of left, and it will begin the grid column on the 3rd line counting from the right! */
}

/* mixing span with shorthand: */
* {
    grid-column: 2/span 3;  /* this will start at the second vertical line counting from the left and fill 3 columns */
}

/* shorthand again, now for rows: */
* {
    grid-row: 3/6;  /* just to remember that even though our grid has only 5 rows, the 6 here indicates the END LINE of the 5th row, which is the 6th line */
}

/* grid-area: shorthand of shorthands, combines both "grid-column" and "grid-row": */
* {
    grid-area: 1/2/4/6; /* in order:  grid-row-start, grid-column-start, grid-row-end, grid-column-end. */
}

/* changing the order of appearance of items in the grid (similar to z-index): */
* {
    order: 1;   /* By default, all grid items have an order of 0, but this can be set to any positive or negative value, similar to z-index. So this one will appear after the 0 values */
}

/* repeat() function: https://developer.mozilla.org/en-US/docs/Web/CSS/repeat()*/
* {
    grid-template-columns: repeat(8, 12.5%);    /* this creates 8 columns, each one filling 12.5% of the total width */
}

/* fractional units (fr): Grid also introduces a new unit, the fractional fr. Each fr unit allocates one share of the available space. For example, if two elements are set to 1fr and 3fr respectively, the space is divided into 4 equal shares; the first element occupies 1/4 and the second element 3/4 of any leftover space.*/
* {
    grid-template-columns: 1fr 5fr; /* this creates 2 columns, the first one taking 1/6 of the width and the second one taking 5/6 of the width */
}


/* combining fr units with other units */
* {
    grid-template-columns: 50px 1fr 1fr 1fr 50px;   /* this will create a column on the left with 50 pixels, then 3 columns in the middle each one taking 1/3 of the available space, and then another column on the right also with 50 pixels */
}

/* grid-template: is a shorthand property that combines grid-template-rows and grid-template-columns */
* {
    grid-template: 50% 50% / 200px; /* this will create a grid with two rows that are 50% each, and one column that is 200 pixels wide. */
}